 Hola, soy Luis Serrano y este es Serrano Academy y este vídeo es sobre AdaBoost. En algunos métodos son un super útil para combinar un montón de modelos de la máquina de la máquina de ok a un gran modelo increíble. ¿Y qué significa por modelos de ok? Bueno, te sorprende, pero como longas las modelos son un poco mejor que las de la random, pueden ser combinadas a un model muy bueno. Entonces, si las acuerzas son solo más de 50%, podrías cleveramente combinarlos para formar un modelo con una muy alta acuerza. Para ilustrar las métodos de examen, imagínate que tienes que hacer un examen difícil y digamos que es un examen de la casa de la casa. Entonces, te enlistas a algunos amigos para ayudar a ti y digamos que esto es parajado, así que no estamos en la juzgar. En particular, hay dos métodos similares, llamados de combinar y deboost, que puedes usar. Los dos consisten de un montón de amigos para ayudar a los que nos ayudan con las preguntas de examen. Vamos a llamar a amigos pocos leonistas, que son un poco difícil de primero, pero es es mentira que nos emphasizes que nuestros amigos no necesitan ser geniosos para poder ayudar a hacerles bien en el examen. En realidad, como longas nuestras amigos son un poco mejor que la anuncia, estamos bien. Y aquí es cómo el bagging funciona. Para el bagging, vamos a elegir a amigos randommente y vamos a hacer que nuestros amigos respetan los testes. Una vez que han respondido, pueden ser correctos o malos para algunas de las preguntas, pero eso no importa. Vamos a combinar los respetantes de alguna manera. Puede ser hecho por votar, puede ser hecho por avergir, ese punto no importa. Hay un mejor manera de hacerlo, pero que es deboostar, es la segunda manera. Aquí tenemos un modo metodológico para elegir a amigos, así que elegimos a nuestro primer amigo randommente. Entonces, hacemos a nuestro amigo en el examen y vemos cómo lo hicimos. Nuestro primer amigo puede tener una fuerza y algunas weaknesses. Vamos a decir, por ejemplo, que son muy buenas en la maestra, pero mal en la geografía. No hay problema, vamos a elegir a un segundo amigo quien es bueno en la geografía para tomar el examen. Y digamos que vamos a combinar estos dos testes. Y hemos notado que juntos, hicieron la maestra y la geografía, pero lo hicieron muy malo en la biología y la física. Vamos a elegir a el tercer amigo para que sea muy bueno en la geometría y la física, y así y así. Cada vez que elegimos a un nuevo amigo, vamos a asegurar que están bien en las weaknesses que todos los otros tienen. Eso es llamado aboostar. Y en este video voy a mostrar a vos aida aboost, que es un método de boosting muy importante en la maestra. Ok, vamos a empezar con este dataset que tiene dos labios, el triángulo blanco y el cuadro red. Y la idea es para construir un clasificador para que se vea un modelo que puede contar estos dos labios aparte. Entonces, aquí es un buen modelo, es el que construye esta línea entre ellos y clasifica todo a una lado como un triángulo blanco y todo a la otra lado como un cuadro red. Ahora, esto es bueno, pero este clasificador es tan complexo, tiene un montón de pequeños piezas en la línea, así que es complicado. ¿Puede hacer lo bueno con un simple clasificador? Y con un simple clasificador, significa algo como una línea vertical o una línea horizontal. Estos son algunos de los clasificadores simples que pueden construir. Si estás interesado en los árboles de decisión, esto es un árbol de decisión con sólo uno nivel. Si os gusta aprender más sobre los árboles de decisión, recomiendo este video que tengo en mi canal y también es link en los comentarios. Pero con clasificadores no siempre hay que ser árboles de decisión, o nada en particular. Como longas son simples, fácil de construir y como longas hacen un poco mejor que una opción de random, que es 50%, podrán combinarlos en un gran clasificador. Esto es la propiedad de AdaBoost. Puede convertir clasificadores en una buena una. Así que vamos a construir algunos simples clasificadores y vamos a llamar a estos los leonistas suficientes. Vamos a construir leonistas suficientes en una forma clave. Vamos a empezar a construir uno de ellos. Vamos a decir que es esta línea vertical aquí, que es clasificador
 que clasifica todo a su izquierda a su izquierda blu y a su izquierda a su red. Este clasificador es bueno pero no perfecto, vamos a tener que construir más. Y esta es la idea, cada aprendizaje va a enfocar en las pertenencias de los primeros. ¿Qué son las pertenencias de este clasificador? Bueno como pueden ver, a más de los puntos correctos, pero han hecho tres misiones, que son estos tres triangles de blu que son clasificados en las pertenencias de la red. Así que vamos a asegurar que el próximo clasificador se enfoca en esos tres puntos. Pero primero vamos a instalar este aquí para laterar. Ahora vamos a construir un nuevo aprendizaje de la década de la nueva. Este nuevo se enfoca en enfocar más en los errores. Así que digamos que es esta línea horizontal aquí, que actualmente se ha hecho bien con los tres triangles. Entonces este también ha hecho algunos misiones, también ha hecho algunos misiones. ¿Cuáles son? Bueno, hay este red de blu que se clasificó como un triángulo de blu y hay estos dos triangles de blu aquí que se clasificaron como red de cuadras. Entonces ha hecho tres misiones pero eso es bueno. Nosotros podemos ampliar estos misiones y luego instalar el clasificador para laterar. Ahora vamos a construir un nuevo clasificador en estos datos de clasificadores. Es mejor que se desplazen los puntos correctos. Esto podría ser esta línea aquí, que se clasificó todo al lado de la clasificadora, como un triángulo de blu y al lado de la red de cuadras. Ahora podemos continuar ampliando los misiones y construyendo muchos estudios de las mesuras, pero digamos que estemos aquí a tres y nos lo construyemos. Ahora tenemos tres mesuras de estudios de la semana para mezclar. Y nuestro último paso es eso. los 3 leonardes de la semana y obtener este fuerte clasifier aquí. Este es el fuerte leónard que AdaBoost construye para nosotros. Ahora, eso es el gesto de AdaBoost, pero hay algunos detalles para Iron, como, por qué cuántos usan los errores de la calda, o cómo combinas los clasifires. Así que eso es lo que vamos a aprender el próximo. Entonces aquí es cómo construir cada leónar de la semana. Vamos a empezar con nuestro set de datos y a partir de esto, vamos a aplicar un peso de 1 a cada uno de los puntos. El primer se va a poner un leónar de semana a este set de datos y vamos a decir que es este leónard. Más de ellos trabajan, pero no pueden hacer demasiado bien, porque el set de datos es un poco más complejo que algo que puede ser explotado con un horizontal o un lunes vertical. Entonces, ¿cómo es bueno este leónard? Bueno, vamos a contar cuántos puntos clasifirán correctamente y incorrectamente. Se clasifan 7 puntos correctamente, que son estos triángulos de azul aquí y estos squares de red aquí, que son todos en el lado correcto. Y ¿cuántos puntos clasifan correctamente? Estos son 3. Los triángulos de azul aquí que son clasificados como un square de red. Ahora vamos a rescatar los 3 puntos clasifirán por algún factor y el factor va a ser 7 por 3. Eso es 2.33, entonces estos 3 puntos que son clasificados se rompen por un factor de 2.33. Y por qué es el factor 7 por 3? Porque tenemos 7 correctos y 3 incorrectos. Así que haz el número de correctos dividido por el número de incorrectos. Este ratio se verá más claro cuando hablamos de los odds en el video, pero para ahora, digamos que es el número de puntos clasificados correctamente dividido por el número de puntos clasificados incorrectamente. Entonces esto es nuestro set de data rescalado y ahora vamos a jugar el mismo juego de nuevo para construir el león de segunda semana. Entonces vamos a construir un león de segunda semana que se fita este set de data también como posible. Es un set de data rescalado, así que hay más énfasis en esos triángulos de azul que mejor se entienden correctamente. Y ahora veamos cómo bien este león de segunda semana se hizo. Así que no vamos a contar el número de correctos y incorrectos. Estamos tomando el número de sus valores, así que eso va a ser 11. 11 porque hay 2.33 3 veces y entonces 1 4 veces. Entonces el número de los correctos valores es 11.
 y la cantidad de valores incorrectos es 3 porque es este punto de misclasificación aquí y estos dos aquí. Entonces ahora vamos a despliegar los puntos incorrectos por un factor de 11 por 3 porque tenemos 11 correctos y 3 incorrectos. Es 3.67, que significa que estos 3 puntos aquí se despliegan por un factor de 3.67. Y continuamos jugando el juego. Este es nuestro data scale nuevo y a este data set vamos a fitar un nuevo learner de la semana. Se debe dar esos grandes puntos correctamente. Y es este punto aquí. Entonces, ¿cuánto es este clasificador? Bueno, ahora la cantidad de valores correctos será 19 porque es esta vez más esta vez. Y la cantidad de puntos correctos es 3 porque es este 3 por aquí. Y podemos continuar escaliando y construyendo leonardos de la semana, pero digamos que decidimos que no lo dejemos. Digamos que solo queremos 3 leonardos. Este es un parámetro de la que podemos encontrar usando cualquier de sus favoritos métodos de parámetro de la semana. Entonces, en este caso, decidimos elegir 3 clasificadores, pero podemos elegir lo más que queremos. Y aquí están nuestros 3 leonardos. El primero tenía un score correcto de 7 y correcto de 3. El segundo tiene 11 y 3 y el tercer tiene 19 y 3. Entonces, cada uno de los leonardos se asoció a un set de data scale y también se asoció a el score correcto y el score incorrecto. Estos números son importantes cuando se combina estos 3 leonardos de la semana en un león fuerte, que es lo que vamos a aprender el próximo. Ok, entonces, ahora que tenemos los 3 leonardos de la semana, les mostré cómo combinarlos en uno león fuerte. La idea es muy simple, vamos a hacerlos votar. En otros palabras, si tenemos un punto aquí y queremos saber el label predictivo, simplemente tenemos que ver qué label es dada a ese punto por los 3 leonardos de la semana. Y los labels son de red para el primero, de blu para el segundo, y de blu para el tercer. Así que eso es 1 de red y 2 de blu. Entonces, cuando nos lo hacemos votar, entonces vamos a tener que el label es blu. Ahora vamos a hacer eso por cada punto. Así que una forma simple de hacer esto es poner más de 1 en las regiones blu y menos de 1 en las regiones redas. Y luego, para imponer las regiones, y luego ver qué son los labels en cada una de estas regiones, dada por los clasifiers. Entonces, el primer clasifier le da un plus de 1 a estas regiones y un menos de 1 a estas. El segundo le da un plus de 1 a estas regiones y un menos de 1 a estas. Y el tercer, un plus de 1 a estas regiones y un menos de 1 a estas dos. Y así, para saber el label de cada uno de las 6 regiones debajo de todo lo que tenemos que hacer es agregar los tres números. Y cuando obtenemos un número que es positivo, entonces vamos a decir que el label es blu. Y cuando obtenemos un label que es negativo, entonces vamos a decir que el label es red. Y eso es lo que obtenemos. Los labels para todas esas 6 regiones. Hay mayores que son zeros, que significa que para aquellos que el clasifier no realmente sabe si son de red o blu, así que podemos justificarlos randommente. Pero la buena noticia es que esto ocurra con una muy, muy, muy pequeña probabilidad, especialmente si tenemos muchos leyes de la clasifier. Entonces, el voto funciona, pero en realidad la manera de combinar el clasifier es un poco más complicada. Pero no mucho. La idea es combinarlos con votos de la clasifier. Entonces, ¿qué significa? Es decir, algunos leyes de la clasifier tienen más fases que otros. Y eso depende de cómo bien ellos hacen. Entonces, un leyes de la clasifier que aprende el dato muy bien tiene más votos que uno que no es tan bueno. Para eso, necesitamos un poco de la maestra, que viene después. Entonces, vamos a probar un poco. Digamos que tenemos un coño y es un bias...
 Entonces, a lo largo de la vida, se retorjarán tres veces de cada cuatro trajes y una vez de los tailos. Por supuesto, puede retorgar nada, pero notemos que la probabilidad de los tailos va a ser tres cuartos. Eso es para tres trajes dividido por los cuatro trajes. Y la probabilidad de los tailos es su complemento, así que es una cuarta, que es una taila dividida por los cuatro trajes. Pero parece que la probabilidad no es exactamente lo que hay aquí. Queremos las odds y la odd es muy similar, excepto, en vez de dividir por el número total de trajes, dividimos el número de trajes por el número de tailos. Entonces, el odd de obtener los trajes va a ser tres por uno. Y el odd de trajes va a ser el inversor multiplicativo, que es una tercera, que es una taila dividida por los tres trajes. La odd es usada mucho en muchos lugares, en particular en los esportes, puedes escuchar cosas como los odd de ganar un juego particular o tal. Pero vamos a hacer alguna plada para ver cómo las odd son. Entonces, aquí tenemos las odd de la cabeza, que es tres, y aquí tenemos las odd de los tailos, que es una tercera. Y nos gustaría tener algo simétrico, pero tenemos un pequeño problema, que es que esto no es simétrico. Imagínate si las odd no eran tres y una tercera, pero en vez de que son siete y un séventh. Si la coiña era mucho más bias, por la cabeza, que por las tailas. Y los puntos están aquí y noten que el centro es uno. Y como hacemos la coiña más bias contra las cabezas, las odd de las tailas van más cerca y más cerca al cero, mientras las odd de la cabeza explotan y van muy, muy, muy longe. Dicimos que convergen hacia el infinito. Entonces, ese es el problema. ¿Qué podemos hacer para hacer esto un poco más simétrico, para que no esté tan pequeño en la izquierda y gigante en la derecha? Bueno, hay una función que nos va a salvar. Y la función que nos va a salvar es el logaritmo. Recuerden, aquí tenemos las tres, las tres, la siete y la de los siete. Y aquí es el uno y tenemos una asimetría contra la derecha y contra la derecha. Bueno, no hay problema. Si lo tomamos el logaritmo, entonces las cosas cambian. Por cierto, estoy tomando el logaritmo natural, que es el e, pero podemos tomar el logaritmo de nada más. Puede ser dos, puede ser diez, puede ser cualquier número que quieras. Y lo mismo se va a llevar. Las cosas están en escala, los números van a cambiar, pero la simetría no va a cambiar. Entonces, cuando tomamos el logaritmo, entonces el uno va a cero, porque el logaritmo de uno es siempre cero. Y ¿qué pasa con tres? Bueno, el logaritmo de tres es 1.1 y vean esto, el logaritmo de una tercera es menos 1.1. Entonces, hay simetría. Si hacemos esto para siete, el logaritmo de siete es 1.95, el logaritmo de siete es menos 1.95. Entonces, de nuevo, hay simetría. Y la razón para la simetría es que el logaritmo de uno o dos es el negativo del logaritmo de x. Esto es una función muy popular, es llamada logODS, y también es llamada logGit. Se aparece en todo en la escala de la máquina. Y vamos a usarla para ayudarnos a combinar los clasificadores. Ok, entonces, reconocemos que tuvimos nuestros tres con los estudiantes aquí, cada uno de ellos con un número correcto y correctos puntos, que era un suma de los valores correctos y el suma de los valores incorrectos. Ahora, para cada uno de ellos, vamos a calcular la probabilidad de estar correcto por el punto de vista normal, pero los odds de estar correctos. Eso significa que para el primero, tenemos un odds de 7 por 3, para el segundo, 11 por 3, y para el tercer, 19 por 3. Y luego calcularíamos los odds log o logGit. Entonces, los valores que obtenemos son 0.85.
 1.3 y 1.85. Esto será el escurso de calidad para cada de los leuconarios. En otro caso, esto es cómo votar cada uno de ellos cuando combinamos. Entonces, con este escurso de calidad vamos a jugar el mismo juego de votación que hemos jugado antes. Eso significa que nos asignamos 0.85 de votación al primer leuconario, 1.3 al segundo y 1.85 al tercer. Entonces lo que hacemos es que vamos a multiplicar estos 1 y el menos de los antes por el escurso de calidad de cada uno de los leuconarios. Entonces vamos a dar 0.85 para estos 1, 1.3 al segundo y 1.85 para el escurso de los leuconarios al tercer. Y ahora vamos a añadirlos como antes para el primer leuconario, para el segundo y para el tercer. Y cuando añadimos, tenemos algunos valores positivos y negativos. Cuando los valores son positivos, entonces vamos a decir que ese región se clasifica como azul y cuando son negativos se clasifica como rojo. Y de esa manera combinamos estos leuconarios para formar un leuconario fuerte. Y vean que este leuconario es muy bueno porque maneja para clasificar el整te data set correctamente. Entonces eso es cómo la boost de calidad funciona. La siguiente cosa que voy a mostrar es un ejemplo de coden. Entonces ahora vamos a hacer un código. El ejemplo que voy a mostrar a vos aparece en el link de la reposición de GitHub en los comentarios que puedes accesar para freír. Este es el repos de mi libro, Más que un Lenguaje de Más. Que tiene un entorno de un chapter de la boost, de la boost, de la boost random, de la boost xg etcétera. En el final del vídeo, puedes ver un link con el código de discurso si quieres verlo. Pero como dije, el código es accesible a nadie en GitHub. Entonces en el código de la la, tenemos este set de data aquí y vamos a fitar un model de la boost de edad. Y esto es muy fácil con un par de líneas de coden. Primero vamos a importar el clasifier de la boost de edad de la boost de edad de la la package de la aprendizaje de la cica. Y luego usamos la función fit, que es todo lo que hacemos. También puedes usar la función score para ver cómo el clasifier está haciendo. Entonces cuando fitamos el clasifier, se hace el siguiente. Esto es el piso de la luna de la luna de la mejor manera. Nota que lo hizo muy bien, solo ha hecho un par de mispetos. Pero nota algo más. Hay este parámetro aquí que llama estimator, que es lo que dije a 6. Eso significa que usamos 6 leonardos de la luna de la la mejor manera de construir este leonard. Y podemos verlo. Estos son los 6 leonardos de la la mejor manera de verlo. Nota que el leonard que es el resultado es una superimposición de estos. Puedemos ver los weights que tienen usando esta función de los estimatores y en este caso, son todos de una. Entonces, de hecho, lo que tenemos es una posición de la posibilidad de todos los leonardos blockados para crear el